{"ast":null,"code":"var _jsxFileName = \"/Users/sadman662662/Documents/netflix-demo/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\nconst trailerUrl = \"XtMThy8QKqU\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); //console.log(request.data.results[1].name);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"640\",\n    playerVars: {\n      //https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  console.table(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/sadman662662/Documents/netflix-demo/src/Row.js"],"names":["React","useState","useEffect","YouTube","axios","baseUrl","trailerUrl","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","console","table","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,OAAO,GAAG,sCAAhB;AACA,MAAMC,UAAU,GAAG,aAAnB;;AACA,SAASC,GAAT,OAA8C;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAiC;AAC5C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeW,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUN,QAAV,CAAtB,CADyB,CAEzB;;AACAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GARQ,EAQN,CAACJ,QAAD,CARM,CAAT;AAUA,QAAMS,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,KAFI;AAGXC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,QAAQ,EAAE;AAFA;AAHD,GAAb;AAQAC,EAAAA,OAAO,CAACC,KAAR,CAAcb,MAAd;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGG,MAAM,CAACc,GAAP,CAAYC,KAAD,iBACV;AAEE,QAAA,SAAS,EAAG,cAAahB,UAAU,IAAI,iBAAkB,EAF3D;AAGE,QAAA,GAAG,EAAG,GAAEL,OAAQ,GACdK,UAAU,GAAGgB,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aACxC,EALH;AAME,QAAA,GAAG,EAAEF,KAAK,CAACG;AANb,SACOH,KAAK,CAACI,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eAcE,QAAC,OAAD;AAAS,MAAA,OAAO,EAAExB,UAAlB;AAA8B,MAAA,IAAI,EAAEY;AAApC;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAxCQX,G;;KAAAA,G;AA0CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\nconst trailerUrl = \"XtMThy8QKqU\";\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //console.log(request.data.results[1].name);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"640\",\n    playerVars: {\n      //https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n  console.table(movies);\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${baseUrl}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      <YouTube videoId={trailerUrl} opts={opts} />\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}