{"ast":null,"code":"var _jsxFileName = \"/Users/sadman662662/Documents/netflix-demo/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport movieTrailer from \"movie-trailer\";\nimport React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); //console.log(request.data.results[1].name);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      //https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie === null || movie === void 0 ? void 0 : movie.name, movie === null || movie === void 0 ? void 0 : movie.release_date).then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v \"));\n      }).catch(err => console.log(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/sadman662662/Documents/netflix-demo/src/Row.js"],"names":["movieTrailer","React","useState","useEffect","YouTube","axios","baseUrl","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","console","log","opts","height","width","playerVars","autoplay","handleClick","movie","name","release_date","then","url","urlParams","URLSearchParams","URL","search","catch","err","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,OAAO,GAAG,sCAAhB;;AAEA,SAASC,GAAT,OAA8C;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAiC;AAC5C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeY,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAUR,QAAV,CAAtB,CADyB,CAEzB;;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GARQ,EAQN,CAACN,QAAD,CARM,CAAT;AAUAW,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AAEA,QAAMW,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,QAAQ,EAAE;AAFA;AAHD,GAAb;;AASA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAIf,UAAJ,EAAgB;AACdC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEO;AACLd,MAAAA,YAAY,CAAC4B,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEC,IAAR,EAAcD,KAAd,aAAcA,KAAd,uBAAcA,KAAK,CAAEE,YAArB,CAAZ,CACGC,IADH,CACSC,GAAD,IAAS;AACb,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAtB,QAAAA,aAAa,CAACmB,SAAS,CAAChB,GAAV,CAAc,IAAd,CAAD,CAAb;AACD,OAJH,EAKGoB,KALH,CAKUC,GAAD,IAASlB,OAAO,CAACC,GAAR,CAAYiB,GAAZ,CALlB;AAMD;AACF,GAXD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAK9B;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGG,MAAM,CAAC4B,GAAP,CAAYX,KAAD,iBACV;AAEE,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAF5B;AAGE,QAAA,SAAS,EAAG,cAAalB,UAAU,IAAI,iBAAkB,EAH3D;AAIE,QAAA,GAAG,EAAG,GAAEJ,OAAQ,GACdI,UAAU,GAAGkB,KAAK,CAACY,WAAT,GAAuBZ,KAAK,CAACa,aACxC,EANH;AAOE,QAAA,GAAG,EAAEb,KAAK,CAACC;AAPb,SACOD,KAAK,CAACc,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GAxDQnC,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import movieTrailer from \"movie-trailer\";\nimport React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //console.log(request.data.results[1].name);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  console.log(movies);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      //https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name, movie?.release_date)\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v \"));\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${baseUrl}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {/* <YouTube videoId={trailerUrl} opts={opts} /> */}\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}